{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isReadOnly from '@stdlib/ndarray-base-assert-is-read-only';\nimport isFunction from '@stdlib/assert-is-function';\nimport base from '@stdlib/ndarray-base-fill-by';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Fills an input ndarray according to a callback function.\n*\n* @param {ndarray} x - input ndarray\n* @param {Function} fcn - callback function\n* @param {*} [thisArg] - callback function execution context\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} second argument must be a function\n* @throws {Error} cannot write to a read-only ndarray\n* @returns {ndarray} updated ndarray\n*\n* @example\n* import zeros from '@stdlib/ndarray-zeros';\n* import getData from '@stdlib/ndarray-data-buffer';\n*\n* function fcn() {\n*     return 10.0;\n* }\n*\n* var x = zeros( [ 3, 1, 2 ], {\n*     'dtype': 'float64'\n* });\n*\n* fillBy( x, fcn );\n*\n* console.log( getData( x ) );\n* // => <Float64Array>[ 10.0, 10.0, 10.0, 10.0, 10.0, 10.0 ]\n*/\nfunction fillBy( x, fcn, thisArg ) {\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\tif ( isReadOnly( x ) ) {\n\t\tthrow new Error( format('nullEs') );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'null2H', fcn ) );\n\t}\n\tbase( x, fcn, thisArg );\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default fillBy;\n"],"names":["fillBy","x","fcn","thisArg","isndarrayLike","TypeError","format","isReadOnly","Error","isFunction","base"],"mappings":";;keA2DA,SAASA,EAAQC,EAAGC,EAAKC,GACxB,IAAMC,EAAeH,GACpB,MAAM,IAAII,UAAWC,EAAQ,SAAUL,IAExC,GAAKM,EAAYN,GAChB,MAAM,IAAIO,MAAOF,EAAO,WAEzB,IAAMG,EAAYP,GACjB,MAAM,IAAIG,UAAWC,EAAQ,SAAUJ,IAGxC,OADAQ,EAAMT,EAAGC,EAAKC,GACPF,CACR"}